#!/bin/bash

set -e;

# Check if name is specified
if [[ $1 == varnish:* ]]; then
  if [ -z $2 ] && [ $1 != varnish:list ]; then
    echo "You must specify an app name"
    exit 1
  else
    APP="$2"
    # Check if app exists with the same name
    if [[ -d "$DOKKU_ROOT/$APP" ]]; then
      APP_EXISTS=true
    else
      APP_EXISTS=false
    fi
  fi
fi

VARNISH_DIR="$DOKKU_ROOT/.varnish"
VARNISH_PORT=8080

# Create .varnish directory if not exists
if [[ ! -d $VARNISH_DIR ]]; then
  mkdir -p $VARNISH_DIR
  chown -R dokku: $VARNISH_DIR
fi

function check_varnish_container() {
  if [[ ! -f "$VARNISH_DIR/pwd_$APP" ]]; then
    echo "Unknown varnish container"
    exit 1
  fi
}

VOLUME_PROPERTY="$VARNISH_DIR/volume_$APP"
PORT_PROPERTY="$VARNISH_DIR/port_$APP"
TELNET_PORT_PROPERTY="$VARNISH_DIR/telnet_port_$APP"

#ENV LISTEN_ADDR 0.0.0.0
#ENV LISTEN_PORT 80
#ENV TELNET_ADDR 0.0.0.0
#ENV TELNET_PORT 6083
#ENV CACHE_SIZE 25MB
#ENV THROTTLE_LIMIT 150req/30s

case "$1" in

  varnish:create)
    VARNISH_IMAGE=varnish/$APP
    # Check if varnish container is installed
    IMAGE=$(docker images | grep "zenedith/varnish " | awk '{print $3}')
    if [[ -z $IMAGE ]]; then
      echo "Varnish image not found... Did you run 'dokku plugins-install' ?"
      exit 1
    fi

    # Check if an existing varnish volume exists
    if [[ -f "$VOLUME_PROPERTY" ]]; then
      VOLUME="`cat $VOLUME_PROPERTY`:/opt/varnish"
      echo
      echo "-----> Reusing varnish/$APP varnish instance"
    else
      VOLUME="/opt/varnish"
    fi

    # Fork varnish image
    ID=$(docker run -d zenedith/varnish exit 0)
    docker wait $ID > /dev/null
    IMAGE=$(docker commit $ID)
    docker tag $IMAGE $VARNISH_IMAGE

    # Launch container
    # docker run -d -e BACKEND_PORT_80_TCP_ADDR=example.com -e BACKEND_ENV_PORT=80 -p 8080:80 zenedith/varnish

    ID=$(docker run -v $VOLUME -p $VARNISH_PORT -d $VARNISH_IMAGE /usr/bin/start_pgsql.sh $DB_PASSWORD)
    sleep 4

    # Rename persistent volume
    if [[ ! -f "$VOLUME_PROPERTY" ]]; then
      VOLUME_PATH=$(docker inspect $ID | grep /var/lib/docker/vfs/dir/ | awk '{print $2}' | sed -e's/"//g')
      if [[ -z $VOLUME_PATH ]]; then
        echo "Your docker version is too old, please update it"
        exit 1
      fi
      echo $VOLUME_PATH > "$VOLUME_PROPERTY"
    fi
    # Write port for further usage
    PORT=$(docker port $ID $VARNISH_PORT | sed 's/0.0.0.0://')
    echo $PORT > "$PORT_PROPERTY"

    echo
    echo "-----> Varnish container created: $VARNISH_IMAGE"
    sleep 1
    dokku varnish:info $APP
  ;;

  varnish:delete)
    VARNISH_IMAGE=varnish/$APP
    ID=$(docker ps -a | grep "$VARNISH_IMAGE":latest | awk '{print $1}')

    # Stop and remove the container
    if [[ ! -z $ID ]]; then
      docker kill $ID > /dev/null
      sleep 1
      docker rm -v $ID > /dev/null
      sleep 1
    fi

    # Remove image
    IMAGE=$(docker images | grep "$VARNISH_IMAGE" | awk '{print $1}')
    if [[ ! -z $IMAGE ]]; then
      docker rmi $IMAGE > /dev/null
    fi

    # Remove container port storage
    if [[ -f "$PORT_PROPERTY" ]]; then
      rm -f "$PORT_PROPERTY"
    fi

    # Remove persistent volume
    if [[ -f "$VOLUME_PROPERTY" ]]; then
      rm -f "$VOLUME_PROPERTY"
    fi
    echo
    echo "-----> Varnish container deleted: $VARNISH_IMAGE"
  ;;

  varnish:info)
    check_varnish_container
    PORT=$(cat "$PORT_PROPERTY")

    echo
    echo "       Host: 172.17.42.1"
    echo "       Port: $PORT"
    echo
  ;;

  varnish:logs)
    VARNISH_IMAGE=varnish/$APP
    ID=$(docker ps -a | grep "$VARNISH_IMAGE" | awk '{print $1}')
    docker logs $ID | tail -n 100
  ;;

  varnish:list)
    CONTAINERS=$(ls $VARNISH_DIR/volume* 2 > /dev/null | sed -e 's/_/ /' | awk '{print $2}')
    if [[ -z $CONTAINERS ]]; then
      echo "There are no Varnish containers created."
    else
      echo "Varnish containers:"
      for CONTAINER in $CONTAINERS; do
        echo "  - $CONTAINER"
      done
    fi
  ;;

  help)
    cat && cat << EOF
    varnish:create <db>                         Create a Varnish container
    varnish:delete <db>                         Delete specified Varnish container
    varnish:info <db>                           Display varnish instance informations
    varnish:list                                Display list of Varnish containers
    varnish:logs <db>                           Display last logs from Varnish container
EOF
  ;;

esac
